int Index(s, sep[] byte);
int IndexAny(s[] byte, chars string);
int IndexByte(b[] byte, c byte);
int IndexFunc(s string, f func(rune) bool);
int IndexRune(s string, r rune);
int LastIndex(s, substr string);
int LastIndexAny(s, chars string);
int LastIndexByte(s string, c byte);
int LastIndexFunc(s string, f func(rune) bool);

string TrimSpace(str string);
bool HasPrefix(s string, prefix string);
bool HasSuffix(s string, suffix string);
int Index(s string, str string);
int LastIndex(s string, str string);
int IndexAny(s, chars string);
int IndexByte(s string, c byte);
void Replace(str string, old string, new string, n int);
string Title(s string);
string ToTitle(s string);
string ToLower(str string);
string ToUpper(str string);
bool Contains(s, substr string);
bool ContainsAny(s, chars string);
int IndexRune(s string, r rune);
int Count(s, sep string);
string Repeat(str string, count int);
void Trim(str string, cut string);
void TrimLeft(str string, cut string);
void TrimRight(str string, cut string);
string TrimPrefix(S string, prefix string);
string TrimSpace(s string);
[] string Fields(str string);
[][] byte FieldsFunc(s[] byte, f func(rune) bool);
bool ContainsRune(s string, r rune);
[] string Split(str string, split string);
string Join(s1[] string, sep string);
[] string SplitN(s, sep string, n int);
[] string SplitAfter(S String, sep string);
[] string SplitAfterN(string s, sep string, n int);
(before, after string, found bool)Cut(s, sep string);